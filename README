There is a sample for the distributed local cache usage.

coding as following steps:

1. you need to create a loadingcache instance outside the sdk.
	example:
	LoadingCache<String , String> cahceBuilder = CacheBuilder.newBuilder()
			.refreshAfterWrite(1 , TimeUnit.SECONDS).expireAfterWrite(3 , TimeUnit.SECONDS)
            .build(new CacheLoader<String , String>() {  
                @Override
                public String load(String key) throws Exception {
                    return UUID.randomUUID().toString(); 
                }  
            });
            
2. initialize the string cache.
	example:
	StringLocalCache.getInstance().initialize(cahceBuilder , new LocalCacheCallback());
	Parameters:
		1: loadingcache object which is created in the first step.
		2: notification callback, such a flush cache event.
		
3. using the cache facilities.
	example:
	1. delete the element in the cache.
		StringLocalCache.getInstance().del("1");
	2. set the element in the cache.
		StringLocalCache.getInstance().set("1" , "hello world");
	3. get the element from the cache.
		StringLocalCache.getInstance().get("1");
	4. notify the events to other cache nodes.
		StringLocalCache.getInstance().notify("event");

4. The Agent process is responsible for replicating the data.